from win32com.client import Dispatch
import datetime as dt
import pandas as pd
from datawarehouse.DWH_CoSo import connect_DWH_CoSo
from datawarehouse import BDATE
import re


def __CheckAbnormal__(func):

    """
    This function send an emailn when there is any abnormal row in the report
    """

    def wrapper(*args, **kwargs):

        fullTable = func(*args, **kwargs)
        abnormalTable = fullTable

        if not abnormalTable.empty:
            abnormalTable = abnormalTable.rename({
                'account_code': 'Số tài khoản',
                'sub_account': 'Số tiểu khoản',
                'final_rate': 'Mức lãi áp dụng',
                'interest': 'Tiền lãi',
                'contract_type': 'Loại hình hợp đồng'
            }, axis=1)
            abnormalHTML = abnormalTable.to_html(index=False,header=True,float_format=lambda x: '{0:,.0f}'.format(x)).replace("\\n","<br>")
            html_str = f"""
            <html>
                <head></head>
                <body>
                    {abnormalHTML}
                    <p style="font-family:Times New Roman; font-size:90%"><i>
                        -- Generated by Reporting System
                    </i></p>
                </body>
            </html>
            """
            outlook = Dispatch('outlook.application')
            mail = outlook.CreateItem(0)
            mail.To = 'quangpham@phs.vn'
            mail.Subject = f"Dữ liệu bất thường theo báo cáo VCF0051 ngày {dt.datetime.now().strftime('%d.%m.%Y')}"
            mail.HTMLBody = html_str
            mail.Send()

    return wrapper


@__CheckAbnormal__
def getData_2_1_a(run_time=dt.datetime.now().date()):
    t1_date = BDATE(str(run_time), -1)
    mismatch022F_022C = pd.read_sql(f'''
    SELECT 
        [relationship].[account_code],
        [vcf0051].[sub_account],
        [vcf0051].[contract_type]
    FROM [vcf0051] LEFT JOIN [relationship] ON [vcf0051].[sub_account] = [relationship].[sub_account]
        AND [vcf0051].[date] = [relationship].[date]
    WHERE ([account_code] LIKE '%022F%' 
        AND [contract_type] LIKE '%KHTN%' 
        AND [status] IN ('A','B')
        AND [relationship].[date] = '{dt.datetime.strptime(t1_date,'%Y-%m-%d')}')
        OR ([account_code] LIKE '%022C%' 
        AND [contract_type] LIKE '%KHNN%' 
        AND [status] IN ('A','B')
        AND [relationship].[date] = '{dt.datetime.strptime(t1_date,'%Y-%m-%d')}')
    ''', connect_DWH_CoSo)
    mismatchOD_UTTB = pd.read_sql(f'''
    SELECT 
        [relationship].[account_code],
        [vcf0051].[sub_account],
        [vcf0051].[contract_type]
    FROM [vcf0051] LEFT JOIN [relationship] ON [vcf0051].[sub_account] = [relationship].[sub_account]
        AND [vcf0051].[date] = [relationship].[date]
    WHERE [relationship].[date] = '{dt.datetime.strptime(t1_date,'%Y-%m-%d')}'
    ''', connect_DWH_CoSo)
    mismatchOD_UTTB = mismatchOD_UTTB[mismatchOD_UTTB.duplicated(subset=['account_code'], keep=False)]
    mismatchOD_UTTB = mismatchOD_UTTB[mismatchOD_UTTB['contract_type'].str.contains('.*OD.*|.*PIA.*', regex=True)]
    mismatchOD_UTTB['OD'] = [re.search(r"(?=OD).*?\%", i) for i in mismatchOD_UTTB['contract_type']]
    mismatchOD_UTTB['OD'] = [i.group() if i else i for i in mismatchOD_UTTB['OD']]
    mismatchOD_UTTB['OD'] = [i.replace(',', '.') if i else i for i in mismatchOD_UTTB['OD']]
    mismatchOD_UTTB['OD'] = mismatchOD_UTTB['OD'].str.extract(r'(\d+\.?\d*)')
    mismatchOD_UTTB['UTTB'] = [re.search(r"(?=PIA).*?\%", i) for i in mismatchOD_UTTB['contract_type']]
    mismatchOD_UTTB['UTTB'] = [i.group() if i else i for i in mismatchOD_UTTB['UTTB']]
    mismatchOD_UTTB['UTTB'] = [i.replace(',', '.') if i else i for i in mismatchOD_UTTB['UTTB']]
    mismatchOD_UTTB['UTTB'] = mismatchOD_UTTB['UTTB'].str.extract(r'(\d+\.?\d*)')
    mismatchOD_UTTB = mismatchOD_UTTB.reset_index(drop=True)
    sub_df = mismatchOD_UTTB[['account_code', 'OD', 'UTTB']].groupby(['account_code']).nunique()
    sub_df = sub_df[(sub_df['OD'] > 1) | (sub_df['UTTB'] > 1)]
    mismatchOD_UTTB.drop(columns=['OD', 'UTTB'], inplace=True)
    idx_list = []
    for i in range(0, len(mismatchOD_UTTB)):
        if mismatchOD_UTTB['account_code'].iloc[i] in sub_df.index.values.tolist():
            idx_list.append(i)
    df_total = pd.concat([mismatch022F_022C, mismatchOD_UTTB.iloc[idx_list]])
    return df_total


@__CheckAbnormal__
def getData_2_1_b(run_time=dt.datetime.now().date()):
    t1_date = BDATE(str(run_time), -1)
    data = pd.read_sql(f'''
        SELECT TOP 10 [relationship].[account_code], [vcf0051].[sub_account] , [cash_balance].[remark]
        FROM [vcf0051] LEFT JOIN [cash_balance]
            ON [vcf0051].[sub_account] = [cash_balance].[sub_account]
            LEFT JOIN [trading_record] 
            ON [cash_balance].[sub_account] = [trading_record].[sub_account] 
            AND [cash_balance].[date] = [trading_record].[date] 
            LEFT JOIN [relationship] 
            ON [trading_record].[sub_account]  = [relationship].[sub_account]
        WHERE ([status] LIKE 'P' AND [increase] IS NOT NULL AND [date]={dt.datetime.strptime(t1_date,'%Y-%m-%d')})
            OR ([status] LIKE 'P' AND [value] IS NOT NULL AND [date]={dt.datetime.strptime(t1_date,'%Y-%m-%d')})
    ''', connect_DWH_CoSo)
    return data


@__CheckAbnormal__
def getData_2_2(run_time=dt.datetime.now().date()):
    t1_date = BDATE(str(run_time), -1)
    data = pd.read_sql(f'''
    SELECT 
        [relationship].[account_code], 
        [payment_in_advance].[sub_account], 
        [payment_in_advance].[customer_rate], 
        [payment_in_advance].[total_fee], 
    FROM 
        [payment_in_advance] LEFT JOIN [relationship] ON [payment_in_advance].sub_account = [relationship].[sub_account]
    WHERE 
        ([payment_in_advance].[total_fee] = 0
        AND [relationship].[account_code] NOT LIKE '022P%'
        AND [payment_in_advance].[date] = '{dt.datetime.strptime(t1_date,'%Y-%m-%d')}')
        OR ([payment_in_advance].[customer_rate] = 0
        AND [relationship].[account_code] NOT LIKE '022P%'
        AND [payment_in_advance].[date] = '{dt.datetime.strptime(t1_date,'%Y-%m-%d')}')
    ''', connect_DWH_CoSo)
    return data


@__CheckAbnormal__
def getData_2_3(run_time=dt.datetime.now().date()):
    t1_date = BDATE(str(run_time), -1)
    data = pd.read_sql(f'''
    SELECT
        [relationship].[account_code],
        [rln0019].[sub_account],
        [rln0019].[final_rate],
        [rln0019].[interest],
    FROM
        [RLN0019] LEFT JOIN [relationship] ON [rln0019].sub_account = [relationship].[sub_account]
    WHERE
        ([rln0019].[final_rate] = 0
        AND [relationship].[account_code] NOT LIKE '022P%'
        AND [rln0019].[date] = '{dt.datetime.strptime(t1_date,'%Y-%m-%d')}')
        OR ([rln0019].[interest] = 0
        AND [relationship].[account_code] NOT LIKE '022P%'
        AND [rln0019].[date] = '{dt.datetime.strptime(t1_date,'%Y-%m-%d')}')
    ''', connect_DWH_CoSo)
    return data
